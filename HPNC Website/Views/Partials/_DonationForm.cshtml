
@using HPNC_Website.Controllers
@using HPNC_Website.Models
@model DonationFormModel

@{
    Html.EnableClientValidation(true);
    Html.EnableUnobtrusiveJavaScript(true);
}


    <script type="text/javascript" src="https://js.squareup.com/v2/paymentform"></script>
    <script>
        var applicationId = 'sq0idp-VhvtshvxGtw1TpOlMiIrRA';
        //var applicationId = "sandbox-sq0idp-VhvtshvxGtw1TpOlMiIrRA"//sandbox

        // Initializes the payment form. See the documentation for descriptions of
        // each of these parameters.
        var paymentForm = new SqPaymentForm({
            applicationId: applicationId,
            inputClass: 'sq-input',
            inputStyles: [
                            {
                                fontSize: '15px'
                            }
            ],
            cardNumber: {
                elementId: 'sq-card-number',
                placeholder: '•••• •••• •••• ••••'
            },
            cvv: {
                elementId: 'sq-cvv',
                placeholder: 'CVV'
            },
            expirationDate: {
                elementId: 'sq-expiration-date',
                placeholder: 'MM/YY'
            },
            postalCode: {
                elementId: 'sq-postal-code'
            },
            callbacks: {

                cardNonceResponseReceived: function (errors, nonce, cardData) {
                    if (errors) {
                        console.log("Encountered errors:");
                        errors.forEach(function (error) {
                            console.log('  ' + error.message);
                        });
                    } else {
                        //                        alert('New Nonce received: ' + nonce);
                        document.getElementById('card-nonce').value = nonce;
                        document.getElementById('nonce-form').submit();
                    }
                },
                unsupportedBrowserDetected: function () {
                    // Fill in this callback to alert buyers when their browser is not supported.
                },
                // Fill in these cases to respond to various events that can occur while a
                // buyer is using the payment form.
                inputEventReceived: function (inputEvent) {
                    switch (inputEvent.eventType) {
                        case 'focusClassAdded':
                            // Handle as desired
                            break;
                        case 'focusClassRemoved':
                            // Handle as desired
                            break;
                        case 'errorClassAdded':
                            // Handle as desired
                            break;
                        case 'errorClassRemoved':
                            // Handle as desired
                            break;
                        case 'cardBrandChanged':
                            // Handle as desired
                            break;
                        case 'postalCodeChanged':
                            // Handle as desired
                            break;
                    }
                },

                paymentFormLoaded: function () {
                    // Fill in this callback to perform actions after the payment form is
                    // done loading (such as setting the postal code field programmatically).
                    // paymentForm.setPostalCode('94103');
                }
            }
        });

        function requestCardNonce(event) {
            debugger
            event.preventDefault();
            paymentForm.requestCardNonce();
        }

    </script>

   
    @using (Html.BeginUmbracoForm("HandleDonationForm", "DonationFormSurface", null, new { @id = "nonce-form" }))
    {

        @Html.ValidationSummary(true)
        @Html.AntiForgeryToken()

            <label>$ Amount</label>
            @Html.TextBoxFor(model => model.Amount, new { @class = "form-control", style = "width: 10em" })
            <div style="color: red; font-size: 10px">
                @Html.ValidationMessageFor(model => model.Amount)
            </div>
                
            <label>First Name</label>
            @Html.TextBoxFor(model => model.FirstName, new { placeholder = "First Name", @class = "form-control" })
            <div style="color: red; font-size: 10px">
                @Html.ValidationMessageFor(model => model.FirstName)
            </div>

            <label>Last Name</label>
            @Html.TextBoxFor(model => model.LastName, new { placeholder = "Last Name", @class = "form-control" })
            <div style="color: red; font-size: 10px">
                @Html.ValidationMessageFor(model => model.LastName)
            </div>


            <label>Email</label>
            @Html.TextBoxFor(model => model.Email, new { placeholder = "Email@email.com", @class = "form-control" })
            <div style="color: red; font-size: 10px">
                @Html.ValidationMessageFor(model => model.Email)
            </div>

            <label>Phone</label>
            @Html.TextBoxFor(model => model.Phone, new { placeholder = "555-555-5555", @class = "form-control" })


            <br />
            <div class="row">
                <label class="donation-header col-lg-10">Mailing Address</label>
            </div>

            <label>Street Address 1</label>
            @Html.TextBoxFor(model => model.StreetAddress1, new { placeholder = "Street Address", @class = "form-control" })
            
            <label>Street Address 2</label>
            @Html.TextBoxFor(model => model.StreetAddress2, new { placeholder = "Unit Number", @class = "form-control" })
            
            <label>City</label>
            @Html.TextBoxFor(model => model.City, new { placeholder = "City", @class = "form-control" })
            
            <label>State</label>
            @Html.TextBoxFor(model => model.State, new { placeholder = "State", @class = "form-control" })

            <label>Postal Code</label>
            @Html.TextBoxFor(model => model.ZipCode, new { placeholder = "Zip Code", id = "model-postal-code", @class = "form-control" })

            @Html.TextBoxFor(model => model.Nonce, new { placeholder = "Nonce - will eventually hide", id = "card-nonce", type = "hidden" })
            @Html.ValidationMessageFor(model => model.Nonce)

            <br />
            <div class="row">
                <label class="donation-header col-lg-10">Credit Card Info</label>
            </div>

            <div>
                <label>Card Number</label>
                <div required class="form-control" id="sq-card-number"></div>
            </div>
            <div style="width: 10em">
                <label>CVV</label>
                <div required class="form-control" id="sq-cvv"></div>
            </div>
            <div style="width: 10em">
                <label>Expiration</label>
                <div required class="form-control" id="sq-expiration-date"></div>
            </div>
            <div style="width: 10em">
                <label>Billing Postal Code</label>
                <div required class="form-control" id="sq-postal-code"></div>
            </div>

            <br />
            <input type="submit" onclick="requestCardNonce(event)">
            <br />

            }


